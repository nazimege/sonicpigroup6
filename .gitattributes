
#Kalender
'''
Sonic Pi’a hoş geldiniz. Umarım siz de çılgın müzikler yapmaya başlamak için, benim size öğretmek için heyecanlı olduğum kadar heyecanlısınızdır. Müzik, sentez, programlama, kompozisyon, performans ve daha fazlasına doğru eğlenceli bir yolculuğa başlıyoruz.

Fakat durun, ne kadar da kabayım! Kendimi tanıtmama izin verin – Ben Sam Aaron – Sonic Pi’ı yaratan kişiyim. Beni Twitter’dan @samaaron adıyla bulabilirsiniz, size selam vermekten mutluluk duyarım. Ayrıca, seyirci önünde Sonic Pi ile kodlayarak canlı müzik yapma performansımı da görmek isteyebilirsiniz.

Eğer aklınızda Sonic Pi’ı geliştirmeye dair fikirler varsa lütfen aktarın, geri dönüt almak çok yardımcı oluyor. Fikrinizin sonraki yenilik olabileceğini asla bilemezsiniz!

Bu rehber kategorize edilmiş bölümlerden oluşmaktadır. Bu rehberi baştan sona kolay bir öğrenme aracı olması için yazdım, istediğiniz bölümlere özgürce girip çıkmaktan çekinmeyin. Eğer eksik bir kısım olduğunu düşünüyorsanız daha sonraki versiyonlarda eklemem için bana söyleyebilirsiniz.

Son olarak, diğer insanları kodlayarak canlı müzik yaparken izlemek de çok iyi bir öğrenme yoludur. Düzenli olarak http://youtube.com/samaaron kanalında canlı yayın yapıyorum, uğrayıp selam vermekten ve soru sormaktan çekinmeyin 

1.1	Canlı Kodlama

Sonic Pi’ın en ilgi çekici özelliklerinden bir tanesi, sanki gerçek bir olanak tanımasıdır. Demek oluyor ki sadece biraz pratikle Sonic Pi’ı alıp sahneye çıkabilirsiniz.

Zihninizi Boşaltın

Rehberimizin devamında Sonic Pi’ın detaylarına inmeden önce size, canlı kodlamanın nasıl bir deneyim olduğunu göstermek istiyorum. Çok fazla (ya da hiç) anlamasanız da endişelenmeyin, sadece koltuğunuza yaslanıp keyfini çıkartın.

Canlı Döngü

Haydi başlayalım, aşağıdaki kodu yukarıdaki katmanlardan birine kopyalayın:

live_loop :flibble do
  sample :bd_haus, rate: 1
  sleep 0.5
end.                                                    

Şimdi,  Run tuşuna tıklayın ve hoş bass bateri ritmini duyun. Ne zaman sesi susturmak isterseniz  Stop tuşuna basabilirsiniz. Ancak hemen basmayın, henüz değil. Onun yerine aşağıdaki adımları takip edin:

1.	Bass bateri sesinin hala devam ettiğinden emin olun
2.	değerini 0.5’den 1 gibi daha yüksek bir değerle değiştirin
3.	Run tuşuna tekrar basın
4.	Bateri hızının nasıl değiştiğini fark edin.
5.	Son olarak, bu anı unutmayın, bu ilk canlı kodladığınız an ve son da olmayacak…

Tamam, bu yeterince basitti. Haydi mix’e başka şeyler ekleyelim. sample :bd_haus satırının üstüne sample :ambi_choir, rate: 0.3 satırını ekleyin. Kodunuz bu şekilde gözükmeli: 

live_loop :flibble do
  sample, rate: 0.3
  sample :bd_haus, rate: 1
  sleep 1
end

Şimdi, biraz kodla vakit geçirin. Değerleri değiştirin – daha yüksek değerler kullandığınızda ne oluyor, daha düşük değerler ya da negatif değerler? :ambi_choir için rate: değerini değiştirdiğinizde (mesela 0.29) ne olduğunu görün. Çok çok küçük bir değeri seçerseniz ne oluyor? Eğer çok küçük bir değer verirseniz bilgisayarınız ritme yetişemeyip bir hata vererek duracaktır (eğer bu olursa daha büyük bir sleep değeriyle programı tekrardan çalıştırın).

Sample satırlarından birine  # ekleyerek yoruma dönüştürün, böylece kodunuzdan çıkmış olacak:

live_loop :flibble do
  sample :ambi_choir, rate: 0.3
#  sample :bd_haus, rate: 1
  sleep 1
end

Bilgisayarınızın o satırı nasıl görmezden geldiğini fark ettiniz mi, böylece o satırı duymuyoruz. Buna yorum denir. Sonic Pi’da yorumları kodumuzdan bir şeyler çıkarmak ya da kodumuza bir şeyler eklemek için kullanabiliriz. 

Son olarak, size oynaması eğlenceli olacak bir şey bırakmama izin verin. Aşağıdaki kodu alıp farklı bir katmana kopyalayın. Şimdi, çok fazla anlamaya çalışmadan sadece iki tane farklı döngü olduğunu görün – yani iki şey aynı anda devam ediyor. Şimdi, en iyi yaptığınız şeyi yapın – deneyin ve oynayın. İşte birkaç tavsiye:

•	Mavi rate: değerlerini değiştirip sesin nasıl değiştiğine bakın.
•	Sleep değerlerini değiştirerek iki döngünün de nasıl birbiri etrafında farklı
•	Yoruma dönüştürdüğünüz satırı tekrar eski haline getirip arkada çalan gitarın keyfini çıkartın.
•	Mavi mix: değerlerinden birini 0 ile 1 aralığında değiştirin.

Run tuşuna basıp değiştirdiğiniz şeyin sonraki döngü başlangıcında sesteki etkisini görün. Eğer bir şekilde zor durumda kalırsanız endişelenmeyin, sadece Stop tuşuna basın, kodu silip değiştirilmemiş halini tekrardan yapıştırın. Böylece tekrar doğaçlamaya başlayabilirsiniz. Hata yapmak öğrenmenin en kısa yoludur…

live_loop :guit do
  with_fx :echo, mix: 0.3, phase: 0.25 do
    sample :guit_em9, rate: 0.5
  end
#  sample :guit_em9, rate: -0.5
  sleep 8
end

live_loop :boom do
  with_fx :reverb, room: 1 do
    sample :bd_boom, amp: 10, rate: 1
  end
  sleep 8
end

Şimdi, merakınız tetiklenene ve bununla daha neler yapabileceğinizi düşünmeye başlayana kadar denemeye ve oynamaya devam edin. Şimdi rehberin geri kalanını okumaya hazırsınız.

Ee, daha ne duruyorsunuz…

1.2– Sonic Pi Ara yüzü

Sonic Pi müzik kodlamak için çok basit bir ara yüze sahip. Haydi biraz zaman geçirerek keşfedelim.

 

•	A – Oynatma Kontrolleri
•	B – Düzenleme Kontrolleri
•	C – Bilgilendirme ve Yardım
•	D – Kod Düzenleyicisi
•	E – Tercih Paneli
•	F – Geçmiş Paneli
•	G – Yardım Sistemi
•	H – Kapsam Görüntüleyici

A.	Oynatma Kontrolleri

Bu pembe tuşlar sesleri başlatma ve bitirmenin ana yoludur. Run tuşu düzenleyicideki kodu çalıştırmaya, Stop tuşu da çalışan bütün kodları durdurmaya, Save tuşu kodu dış bir dosyaya kaydetmeye ve Record tuşu ise çalan sesi kaydetmeye (WAV dosyası şeklinde) yarar.

B.	Düzenleyici Kontrolleri

Bu turuncu tuşlar kod düzenleyicisini kontrol etmenizi sağlar. Size + ve Size – tuşları yazıyı büyütmeye ve küçültmeye yarar. 

C.	Bilgilendirme ve Yardım

Bu mavi tuşlar bilgilendirmelere, yardıma ve tercihlere erişiminizi sağlar. Info tuşu Sonic Pi’ın kendisi hakkında – çekirdek ekip, tarihçe, yardımcı olanlar ve topluluk- hakkında bilgi veren bir pencere açar. Help tuşu yardım sistemini (G) aktifleştirir ve Prefs tuşu basit sistem parametrelerini kontrol edebileceğiniz bir tercihler penceresi açar.

D.	Kod Düzenleyicisi

Bu alan kodunuzu yazdığınız ve müzik icra ettiğiniz alandır. Kod yazabileceğiniz, silebileceğiniz, kesip yapıştırabileceğiniz basit bir yazı düzenleyicisidir. Word veya Google Docs’un basit bir versiyonu gibi düşünebilirsiniz. Bu düzenleyici kelimeleri anlamlarına göre otomatik olarak renklendirir. Bu özellik başlangıçta garip gelebilir, ancak zaman geçtikçe ne kadar faydalı olabileceğini göreceksiniz. Örneğin, bir şeyin mavi olmasından onun bir sayı olduğunu anlayabileceksiniz.

E.	Tercih Paneli

Sonic Pi Bilgilendirme ve Yardım bölümündeki prefs butonuna tıklanarak ulaşılabilen bir tercihler penceresine sahiptir. Bu içinde bir miktar ayar bulunan tercihler penceresinin açılmasını sağlar. Örneğin, mono ses moduna geçme, stereoya geçme, Raspberry Pi’de ses seçici vb.


F.	Geçmiş Paneli 

Kodunuzu çalıştırdığınızda programın ne yaptığı bu panelde gösterilir. Varsayılan olarak yarattığınız sesle eş zamanlı olarak sesle ilgili bir mesaj yazar. Bu özellik kodunuzdaki hataları görmek ve kodunuzun ne yaptığını anlamak için önemlidir.

G.	Yardım Sistemi

Sonic Pi’ın en önemli kısımlarından birisi de pencerenin altında yer alan yardım sistemidir. Bu sistem mavi  Help tuşuna tıklanarak aktifleştirilebilir. Yardım sistemi Sonic Pi’ın içinde bulundurduğu her şeyle, bu rehber, synthler, örnekler, FX ve Sonic Pi’ın sağladığı bütün fonksiyonların listesi, ilgili yardım ve bilgiler içerir.

H.	Kapsam Görüntüleyici

Kapsam görüntüleyici duyduğunuz sesi aynı zamanda görmenizi sağlar. Saw sesinin gerçekten de bir testereye benzediğini ve basit beep sesinin ise bir sinüs dalgası olduğunu kolayca görebilirsiniz. Ayrıca dalgaların boyutundan çaldığınız sesin kısık ya da yüksek olduğunu da anlayabilirsiniz. Oynayabileceğiniz 3 tane kapsam bulunmakta – varsayılan kapsam sağ ve sol kanalı birleştiren bulunmakta, ayrıca her bir kanal için ayrı bir kapsam oluşturan stereo kapsamı bulunmakta ve son olarak da Lissajous eğrisi sağ ve sol kanalın arasındaki ilişkiyi kullanarak güzel resimler çizebilirsiniz (https://en.wikipedia.org/wiki/Lissajous_curve).

1.3– Çalarak Öğrenmek

Sonic Pi sizi bilgisayarı ve müziği aynı anda çalarak ve deneyerek öğrenmeye teşvik eder. En önemli şey eğleniyor olmanız ve ayrıca nasıl kodlanacağını ve doğaçlama yapılacağını da öğrenmiş oluyorsunuz.

Hata Yoktur

Hazır bu konudayken size biraz yıllarca süren canlı kodlayarak müzik yapma hakkında edindiğim bilgileri tavsiye olarak vermeme izin verin – hata yoktur, sadece fırsatlar vardır. Bu benim sıklıkla Jazz hakkında duyduğum bir şey fakat aynı şey canlı kodlama için de geçerli. Ne kadar tecrübeli olduğunuz önemsiz – yeni başlayan birinden yıllarca kodlayarak müzik yapmış birine kadar herkes bazen beklenmedik sonuçlar alabilir. Bazen bu beklenmedik sonuçlar kulağa güzel gelebilir ve bazen müziğinize onu da dahil edersiniz. Fakat, bazen tamamen kötü de olabilir. Ne olduğu önemsiz, tek önemli olan onunla ne yaptığınız. Sesi alın, değiştirin ve müziğinizle uyumlu mükemmel bir şeye dönüştürün.

Basit Başlayın

Öğrenirken muhteşem şeyler yapmanın cazibesini göreceksiniz. Fakat, bu isteği birazcık sonraya saklayın. Şimdilik sadece basit şeyleri düşünüp bundan zevk almaya çalışın ve basit adımlar atın. Aklınıza bu basit adımlar hakkında fikirler geldiğinde onu gerçekleştirmeye çalışın ve verdiği fikirlerle çalın. Gerçekten yol kat etmekle meşgul olmaya başlamadan önce, yaptıklarınızı başkalarıyla paylaşmaktan çekinmeyin
'''
#Zeynep
'''
2.1- İlk Bipleriniz

Aşağıdaki örnek koda bakalım:
	play 70
Bu kod her şeyin başlangıcı. Bu kodu kopyalayıp kod alanına (Run tuşunun altındaki beyaz alan) yapıştır ve sonra Run tuşuna bas!

-Biipp!

Etkileyici! Tekrar bas. Şimdi yine bas. Yine…

Vay be çılgın, Eminim bütün gün boyunca bu tuşa basıp durabilirsin. Fakat kendini sonsuz Beep’lerin içinde kaybetmeden önce, numarayı değiştirmeyi deneyebilirsin:

	play 75

Bir fark duyabiliyor musun? Daha düşük bir numarayı dene:

	play 60

Düşük rakamlar düşük perdede seslere, yüksek rakamlar yüksek perdede seslere yol açıyor. Aynı piyano gibi, piyanonun alt tarafındaki (sol tarafı) tuşlar daha düşük notalar çalarken üst tarafındaki (sağ taraf) tuşlar daha yüksek notaları çalıyor. Aslında bakarsak bu numaralar piyanonun tuşlarına denk geliyor, play 47 demek piyanonun 47’inci notasını çal demek. Bu da demek oluyor ki, play 48 aslında bir nota üstte (sağdan bir nota üstte). 4.oktav C, numara 60 oluyor.

-Akorlar

Tek bir nota çalmak eğlenceli fakat birden fazla notayı aynı anda çalmak çok daha iyi: Alttaki örneği kopyalayıp yapıştır ve dene:

	play 72
	play 75
	play 79
 
Senin de fark ettiğin üzere birden fazla play yazdığında hepsi aynı anda çalıyor. Kendin yeni notaları dene, hangileri birlikte güzel oluyor? Hangileri kötü oluyor? Denemekten korkma, keşfet!

-Melodi

Notaları ve akorları oynatmak eğlenceli, fakat bir melodiye ne dersin? Ya bir notayı başka bir notadan sonra oynatmak istersen o zaman napıcaksın? Tek yapman gereken arlarına sleep koymak!

	play 72
	sleep 1
	play 75
	sleep 1
	play 79
'''
#Metehan
'''
4 – Tesadüfileştirmek (Randomisation)

Kendi müziğinizi yaparken müziğinize ilginç eklemeler yapmak için rastgele sayılar kullanmak harika bir yoldur. Sonic Pi, müziğinize rastgelelik katmak için harika bir işleve sahiptir ancak, bunları öğrenmeye başlamadan önce bir gerçekle yüzleşmeniz gerekir: Sonic pi tamamen rastgele değildir. Bu ne demek dediğinizi duyar gibiyiz. Gelin beraber görelim.

Tekrarlanabilirlik (Repeatability)

İşte karşınızda rrand (ranged random) fonksiyonu. “rrand” fonksiyonu size iki sayı arasında bir değer bulmanızı sağlayan oldukça kullanışlı bir fonksiyondur. Haydi rastgele bir nota çalalım:

play rrand(50, 95)

	Vay be, rastgele bir nota çalındı. Bilgisayar 83.7527 notasını seçti ve çaldı. 50 ve 95 arasında güzel bir nota. Ah, bir dakika, gerçekten aynı numara mı rastgele bir biçimde geldi? Tekrar oynatmayı deneyin. Nasıl? Yine mi 83.7527? Bu rastgele olamaz!

	Sorunuzun cevabı, rrand gerçekten random değil sahte rastgeledir (pseudo-random). Sonic Pi size rrand fonksiyonuyla tekrarlanan davranışta rastgele benzeri sayılar verecektir. Bu komutu bilgisayarınızda oluşturduğunuz müzikte kullanmanız, her bir bilgisayarda farklı bir müzik yaratmanızı sağlar. Elbette bir rastgelelik fonksiyonu her seferinde 83.7527 sayısını seçse yeterince ilgi çekici olmazdı. Ancak işler göründüğü gibi değil. Gelin hep beraber bakalım:

loop do
  play rrand(50, 95)
  sleep 0.5
end 

	Evet! Sonunda rastgele müziğimiz çalıyor. Belirli çalışmalar içerisinde rastgele fonksiyonlarla yapılan işlemler müzik içinde rastgele değerlere dönüşür. Ancak ilk çalıştırmadan sonraki çalıştırmalarda pseudo-random’dan dolayı her seferinde aynı ses dizisini verecek ve aynı sesler çıkacaktır. Groundhog Müzik sentezi günü!


Perili Çanlar (Haunted Bells)

	İşte eylemdeki rastgeleliğin güzel bir örneği olan perili çanların rastgele oran ve uyku süreleri:

loop do
  sample :perc_bell, rate: (rrand 0.125, 1.5)
  sleep rrand(0.2, 2)
end

Rastgele Ayırımlar (Random Cutoff)

	Bir başka eğlenceli rastgelelik örneği ise brleşleri rastgele biçimde ayırmaltır. :tb303 bunun için harika bir örnektir:

use_synth :tb303

loop do
  play 50, release: 0.1, cutoff: rrand(60, 120)
  sleep 0.125
end

Rastgele Kaynaklar (Random Seeds)

	Peki ya rastgele oluşmuş olan müziğimizi değiştirmek istersek ne yapacağız? Bu tamamen use_random_seed ile farklı bir başlangıç seçmeye bağlıdır. Halihazırda kullanılan kaynak değeri 0’dır. Farklı bir kaynak değeri seç ve farklı bir rastgelelik deneyimi yaşa!

5.times do
  play rrand(50, 100)
  sleep 0.5
end

	Bu kod her çalıştırıldığında aynı sırada 5 nota duyulacaktır. Daha farklı sıraya sahip olmak için kaynak değerini değiştir:

use_random_seed 40
5.times do
  play rrand(50, 100)
  sleep 0.5
end

	Bu kod ise ilkinden tamamen farklı sırada notalar çalar ve bu sefer diğer herkes seninle aynı sırada notaları duyar. 

Choose Fonksiyonu

	Choose fonksiyonu oluşturduğunuz herhangi bir liste içerisinden bir değer seçmeyi sağlayan bir fonksiyondur.

loop do
  play choose([60, 65, 72])
  sleep 1
end

Rrand Fonksiyonu 

	Bu fonksiyonda daha önce bahsetmiştik ancak yine de tekrar edelim. Rrand fonksiyonu sizin girdiğiniz 2 değer arasında herhangi bir gerçek sayı seçer. Seçilen sayılar hiçbir zaman tam sayı olmaz. İşte rrand(20, 110) için bazı örnek değerler:

87.5054931640625
86.05255126953125
61.77825927734375

Rrand_i Fonksiyonu

Bazı zamanlarda özellikle rastgele tam sayı kullanmanız gereken durumlarda rrand_i sizi kurtarmaya geliyor. Rrand fonksiyonu ile neredeyse aynı. İşte size örnek rrand_i(20, 110) değerleri:

88
86
62

Rand Fonksiyonu

Rand fonksiyonu sizin için 0 (dahil) ve girdiğiniz maksimum değer (dahil değil) arasında rastgele bir sayı seçer. Eğer herhangi bir sayı girmediyseniz maksimum değeri otomatik olarak 1 alır.

loop do
  play 60, amp: rand
  sleep 0.25
end

Rand_i Fonksiyonu

	Rand fonksiyonuyla benzer şekilde çalışan rand_i fonksiyonu değerler arasından rastgele tam sayı seçer.

Dice

	Zar atışına benzeyen dice fonksiyonu ise rrand_i gibi girilen değerler arasından rastgele bir tam sayı seçer ancak bu sefer minimum değer 0 yerine 1’dir.



One_in

	Son olarak one_in fonksiyonu ise seçilen değerler arasındaki olasılığı bulur. Sayıda 1 ihtimalle True, değilse False sonucunu çıkartır.

Şimdi kodlarınıza biraz rastgelelik ekleyin!
'''
#Oğuz
'''
KISMİ MODELELR (PARTIAL SAMPLES)

Bu kısımda Sonic Pi’In modellerini daha da çok keşfedeceğiz. Nasıl kullanıldığını göstermiştik. Örneğin:
sample :loop_amen
Daha sonra hızlarını nasıl değiştirdiğimiz gördük:
sample :loop_amen, rate: 0.5
Daha hafifletmek için:
sample :loop_amen, rate: 0.5, attack: 1
Aynı zamanda başlangıcının :sustain komutu ile nasıl başlayacağının yanında attack ve release komutlarını ayarlamak için de kullanılabilir.
sample :loop_amen, rate: 2, attack: 0.01, sustain:  0, release: 0.35
Fakat bunun yanında modellerin nerden başlayacağını söyleyebilsek güzel olmaz mıydı?

BAŞLANGIÇ NOKTASI SEÇME (Choosing a starting point)

0 ‘ın başlangıç 1’in son ve 0.5’in yarı yol olduğu, 0 ve 1 arasında sıradan bir başlangıç noktası seçmek mümkün. Alttaki kodda olduğu gibi:
sample :loop_amen, start: 0.5
Son çeyreğine nerdesiniz:
sample :loop_amen, start: 0.75

SON NOKTAYI SEÇME (Choosing a finish point)

Benzer bir şekilde 0 ile 1 arasında sıradan bir bitiş noktası seçilebilir:
sample :loop_amen, finish: 0.5

BAŞLANGIÇ VE BİTİŞİ BELİRLEME (Specifying start and finish)
Modelin sadece bir kısmı için:
Sample :loop_amen, start:0.4, finish: 0.6
Peki başlangıç noktasının bitişinden daha büyük seçersek ne olur? Tersten çalmaya başlar:
Sample :loop_amen, start: 0.6, finish: 0.4

HIZ İLE DÜZENLEME (Combining with rate)

Modellerin sadece bir kısmını daha yavaş ya da daha hızlı yapmak ister misin? Şunu bir dene:

sample :loop_amen, start: 0.5, finish: 0.7, rate: 0.2

ZARFLAR İLE DÜZENLEME (Combining with envelopes)
Sonunda bunların hepsini ADSR zarfları ile daha ilgi çekici bir hale getirebiliriz.
sample :loop_amen, start: 0.5, finish: 0.8, rate: -0.2, attack: 0.3, release: 1
Keyfini çıkar!!

3.6
HARİCİ MODELLER (EXTERNAL SAMPLES)
Eğer Sonic Pi içerisinde bulunan modeller yetersiz geliyorsa kendi kayıtlarınızı da dahil etmek mümkün. Bunun için parçanızın taşınılabilirliğini kontrol etmek durumundayız.

TAŞINABİLİRLİK (Portability)
Eğer eserinizi sadece Sonic Pi bünyesindeki modeller ile yaparsanız bunu arkadaşlarınızla dahi paylaşıp keyfini çıkarabilirsiniz.
Fakat, kendi parça modelleriniz kullanırsanız, arkadaşlarınızla bu parça modeli de paylaşıp eğlenceye devam edebilirsiniz. Göz önünde bulundurulması gereken bir özellik.

YEREL MODELLER (Local Samples)
Şu şekilde WAV, AIFF veya FLAC tipi dosyaları parça modeller olarak kullanabilirsiniz: 
#Raspberry Pi, MAC, LINUX
sample “/Users/kullanıcı_adı/Desktop/parça-modelim.wav”
#Windows
sample “C:/Users/kullanıcı_adı/Desktop/parça-modelim.wav”
Sonic Pi otomatik olarak modeli yükleyi çalacaktır. Aynı zamanda standart komutları kullanarak modeli düzenleyebilirsiniz.
#Raspberry Pi, MAC, LINUX
sample “/Users/kullanıcı_adı/Desktop/parça-modelim.wav”, rate: 0.5, amp:0.3
#Windows
sample “C:/Users/kullanıcı_adı/Desktop/parça-modelim.wav”, rate: 0.5, amp: 0.3

3.7
MODEL PAKETLERİ (SAMPLE PACKS)
NOT: BU kısım Sonic Pi ile uyumlu parça modelleri yaratanlar ve satın alanlar için düzenlenmiştir. Sonic Pi bünyesindeki modeller yeterliyse bu kısmı geçebilirsiniz.

Büyük model dosyaları ile çalışmak biraz sıkıntılı bir durum yaratabilir. Örneğin:
/path/to/my/modeller/ 

Dosyasında şu modeller olsun:

100_A#_melodi1.wav 
100_A#_melodi2.wav 
100_A#_melodi3.wav 
120_A#_melodi4.wav 
120_Bb_gitar1.wav 
120_Bb_piyano1.wav 

Piyano modelini kullanmak için şu yolu deneyebilirsin:
Sample “/path/to/my/modeller/120_Bb_piyano.wav”
Sonra gitar modeli için:
Sample “path/to/my/modeller/120_Bb_gitar1.wav”

Burada dosya ve model isminiz bildiğimiz bir durum var, ya bunları bilmeseydik. 

MODEL PAKETLERİNİ İNDEKSELEME (Indexing Sample Packs)
Eğer ilk modeli duymak istersen:
Sample “/path/to/my/modeller/”, 0
Değişken kullanarak daha basit bir yol izlenebilir.
modeller = “/path/to/my/modeller/”
sample modeller, 0

Şimdi ikinci modeli duymak için:
modeller = “/path/to/my/modeller/”
sample modeller, 1

Artık modellerin isimlerine gerek duymadığımızı fark ettin mi? Hatta dosyadaki model sayısından daha fazla bir sayı girersen de içlerinden birini çalmaya devam edecektir.

MODEL PAKETLERİ FİLTRELEME (Filtering Sample Packs)
Genellikle indeksleme yeterli olduğu halde modelleri düzenlemek ve sıralamak için daha çok güce ihtiyacımız var. Tesadüfi, birçok model paketleri yararlı bilgiler içeriyor. Örneğin:
100_A#_melodi1.wav 
100_A#_melodi2.wav 
100_A#_melodi3.wav 
120_A#_melodi4.wav 
120_Bb_gitar1.wav 
120_Bb_piyano1.wav 

Bu isimlerde birden fazla bilgi olduğunu fark ettin mi? 100 ve 120 sayıları modellerin bpm değerini göstermekte. Aynı zamanda A# ve Bb notalarında çalındığını göstermekte.

Bu bilgileri sadece istediklerimizi çalmak amacıyla kullanabiliriz. Örneğin:
modeller = “/path/to/my/modeller/”
sample modeller, “120”

Bu kod bizi ilk eşleşen modele götürecek yani gitar1 modeline.
modeller = “/path/to/my/modeller/”
sample modeller, “120”, 1
Bu kod ise bize 120 bpm’deki 2. Eşleşmeyi sağlayacak.

Hatta az sonra görüleceği üzere birden fazla filtre kullanılabilir.
modeller = “/path/to/my/modeller/”
sample modeller, “1201, “Bb”,


Kaynaklar (Sources)

Model filtresi pre-arg sistemi 2 tür bilgiyi algılıyor: kaynaklar ve filtreler. Kaynaklar potansiyel adaylar için kullanılan bilgi olarak gösterilebilir. Bir kaynak 2 formda olabilir.

1.	 “/path/to/my/modeller/” – bizi geçerli dosyaya ulaştıran bir yol
2.	 “/path/to/my/modeller/foo.wav” – bizi geçerli modeler ulaştıran bir yol

Sample komutu önce tüm kaynakları toplayarak bir muhtemel aday listesi oluşturuyor. Bu liste önce geçerli yolları ekliyor daha sonra geçerli .flac, .aif, .aiff, .wav, .wave dosyalarını ekliyor. Örneğin:

modeller = "/path/to/my/modeller/"
modeller2 = "/path/to/my/modeller2/"
yol= "/path/to/my/samples3/foo.wav"

sample modeller, modeller2, yol, 0  

Varsayılan olarak, yalnızca bir dizindeki örnek dosyalar aday listesine toplanır. Bazen aramak ve filtrelemek istediğiniz birçok iç içe geçmiş model klasörünüz olabilir. Bu nedenle, yolun sonuna ** ekleyerek, belirli bir klasörün tüm alt klasörlerindeki tüm örnekler için özyinelemeli bir arama yapabilirsiniz.

modeller = "/path/to/nested/modeller/**"
sample modeller, 0

Son olarak, ilk önce kaynakların gitmesi gerektiğini unutmayın. Herhangi bir kaynak belirtilmezse, yerleşik örneklem grubu birlikte çalışılacak adayların varsayılan listesi olarak seçilecektir.


FİLTRELER (Filters)
Bir aday listeniz varsa şu filtreleme türlerini kullanabilirsiniz:
	. "foo" Dizeler, dosya adındaki alt dize oluşumuna (eksi dizin yolu ve uzantı) filtre uygular.
	. / fo [oO] / Normal İfadeler, dosya adının (eksi dizin yolu ve uzantısı) desen eşleşmesine filtre uygular.
	. : foo - Anahtar kelimeler adayları, anahtar kelimenin dosya adıyla doğrudan eşleşip eşleşmediği konusunda filtreleyecektir (eksi dizin yolu ve uzantısı).
	. lambda {| a | ...} - Bir argüman olan işlemler aday filtre veya jeneratör işlevi olarak değerlendirilir. Mevcut adayların listesinden geçirilecek ve yeni bir aday listesi (örnek dosyalara uygulanan geçerli yolların bir listesi) geri göndermesi gerekir.
	. 1 - Rakamlar bu indekse sahip adayı seçecektir (gerekirse bir halka gibi sarma).

KARIŞIMLAR (Composites)
Son olarak, kaynak veya filtre yerleştirebileceğiniz her yerde listeleri kullanabilirsiniz. Liste otomatik olarak düzleştirilecek ve içerik düzenli kaynaklar ve filtreler olarak değerlendirilecektir. Bu nedenle aşağıdaki model çağrıları anlamsal olarak eşdeğerdir:

sample "/path/to/dir", "100", "C#"
sample ["/path/to/dir", "100", "C#"]
sample "/path/to/dir", ["100", "C#"]
sample ["/path/to/dir", ["100", ["C#"]]]

SARMA (Wrapping Up)
Bu, model paketleri işlemek ve kullanmak için gerçek güce ihtiyaç duyan insanlar için gelişmiş bir bölümdü. Bu bölümün çoğu çok fazla anlam ifade etmiyorsa, endişelenmeyin. Henüz bu işlevselliğin hiçbirine ihtiyacınız yok. Ancak, ne zaman ihtiyacınız olduğunu bilirsiniz ve büyük örneklem dizinleriyle çalışmaya başladığınızda geri dönüp tekrar okuyabilirsiniz.

'''


 


